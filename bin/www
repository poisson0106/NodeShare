#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('firstnode:server');
var http = require('http');
var _ = require('underscore')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//Socket part
var io = require('socket.io').listen(server);
global.onlineList = new Array();

io.on('connection', function(socket){
  console.log('a user connected');

  socket.on('disconnect', function(data){
    console.log('user disconnected');
  });

  //online
  socket.on('online',function(username){
    global.onlineList.push(username);
    var back = {"name":username,"list":global.onlineList};
    io.emit('online',back);
  });

  //on message
  socket.on('nmsg',function(params) {
    io.emit('rmsg',params);
  });

  //offline
  socket.on('offline',function(username) {
    if(_.contains(global.onlineList , username)){
      onlineList = _.without(global.onlineList, username);
      var back = {"name":username,"list":global.onlineList};
      io.emit('offline',back);
    }
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
